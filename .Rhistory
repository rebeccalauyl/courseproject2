hurl <- "https://www.microsoft.com"
con <- url(hurl)
htmlCode <- readLines(con)
close(Con)
hurl <- "https://www.microsoft.com"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply <- (htmlCode[c(20,40)], nchar)
htmlCode
sapply <- nchar(htmlCode[c(20,40)])
sapply(htmlCode[c(20,40)], nchar)
## Question 5:
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./data/06pid.csv", method = "curl")
dateDownloaded <- date()
DT <- fread("./data/06pid.csv")
# We can change the value of "race" according to our needs
race <- 1000
# This method use the features of data.table.
# replicate(race, function for measuring time(function being tested)[bit of
# function for measuring time result which exploring with str suggests the
# specific user time is in])
horse1 <- replicate(race, unname(system.time(DT[, mean(pwgtp15), by = SEX]))[1])
# This method will be slowest because it has two parts, and can be leave out of
# the speed race
system.time({mean(DT[DT$SEX == 1, ]$pwgtp15); mean(DT[DT$SEX == 2, ]$pwgtp15)})
# Wrong coding script: the "by" argument is not used, so
# "mean(DT$pwgtp15, by = DT$SEX)" is just the same as "mean(DT$pwgtp15)"
mean(DT$pwgtp15, by = DT$SEX)
# This method use tapply() function to solve the problem:
horse2 <- replicate(race, unname(system.time(tapply(DT$pwgtp15, DT$SEX, mean)))[1])
# This method use split() and sapply() functions to solve the problem:
horse3 <- replicate(race, unname(system.time(sapply(split(DT$pwgtp15, DT$SEX), mean)))[1])
# Wrong coding script: it doesn't meet the need of the question
rowMeans(DT)[DT$SEX == 1]
rowMeans(DT)[DT$SEX == 2]
# Calculate the mean of each horse and choose which is the fastest horse, namely
# the fastest way to calculate the average value of the variable "pwgtp15"
mean(horse1)
mean(horse2)
mean(horse3)
# All three results show that the horse3 is the fastest horse. That means the
# method using split() and sapply() functions is the most effective way.
# Results 1:
# > mean(horse1)
# [1] 0.001261
# > mean(horse2)
# [1] 0.001615
# > mean(horse3)
# [1] 0.000998
# Results 2:
# > mean(horse1)
# [1] 0.001168
# > mean(horse2)
# [1] 0.001608
# > mean(horse3)
# [1] 0.001074
# Results 3:
# > mean(horse1)
# [1] 0.001207
# > mean(horse2)
# [1] 0.001741
# > mean(horse3)
# [1] 0.00102
# Futhermore:
# We can see how the measure times are based on the batches in the computers
# chip cycle if we just make graphs of each individual result
plot(horse1)
plot(horse2)
plot(horse3)
# The cumulative average changes:
horse1_av <- cumsum(horse1) / seq_along(horse1)
horse2_av <- cumsum(horse2) / seq_along(horse2)
horse3_av <- cumsum(horse3) / seq_along(horse3)
# Plot lines (horse1 use red line; horse2 use blue line; horse3 use black line):
# Making sure the y axis is at the right height
topY <- max(horse1_av, horse2_av, horse3_av)
lowY <- min(horse1_av, horse2_av, horse3_av)
plot(horse1_av, type = "l", col = "#FF000099", ylim = c(lowY, topY),
xlab = "distance", ylab = "average time")
lines(horse2_av, col = "#0000FF99")
lines(horse3_av, col = "#00000099")
# Also, we can plot points of all three horses:
topY <- max(horse1, horse2, horse3)
lowY <- min(horse1, horse2, horse3)
plot(horse1, type = "p", col = "#FF000099", ylim = c(lowY, topY),
xlab = "distance", ylab = "user time")
points(horse2, col = "#0000FF99")
points(horse3, col = "#00000099")
## Question 5:
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile = "./data/06pid.csv", method = "curl")
dateDownloaded <- date()
DT <- fread("./data/06pid.csv")
# We can change the value of "race" according to our needs
race <- 1000
# This method use the features of data.table.
# replicate(race, function for measuring time(function being tested)[bit of
# function for measuring time result which exploring with str suggests the
# specific user time is in])
horse1 <- replicate(race, unname(system.time(DT[, mean(pwgtp15), by = SEX]))[1])
# This method will be slowest because it has two parts, and can be leave out of
# the speed race
system.time({mean(DT[DT$SEX == 1, ]$pwgtp15); mean(DT[DT$SEX == 2, ]$pwgtp15)})
# Wrong coding script: the "by" argument is not used, so
# "mean(DT$pwgtp15, by = DT$SEX)" is just the same as "mean(DT$pwgtp15)"
mean(DT$pwgtp15, by = DT$SEX)
# This method use tapply() function to solve the problem:
horse2 <- replicate(race, unname(system.time(tapply(DT$pwgtp15, DT$SEX, mean)))[1])
# This method use split() and sapply() functions to solve the problem:
horse3 <- replicate(race, unname(system.time(sapply(split(DT$pwgtp15, DT$SEX), mean)))[1])
# Wrong coding script: it doesn't meet the need of the question
rowMeans(DT)[DT$SEX == 1]
rowMeans(DT)[DT$SEX == 2]
# Calculate the mean of each horse and choose which is the fastest horse, namely
# the fastest way to calculate the average value of the variable "pwgtp15"
mean(horse1)
mean(horse2)
mean(horse3)
getwd()
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url=fileUrl,destfile="idaho_housing.csv", method="curl")
data <- read.csv(idaho_housing.csv)
head(data)
getwd()
library("swirl")
swirl()
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 < colorRampPalette(c("red", "blue"))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
color.scale
p1(20)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3(5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
brewer.pal(3,"BuGn")
cols <- brewer.pal(3,"BuGn")
ShowMe(cols)
showMe(cols)
pal <- colorRampPalette((cols))
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col(pal(20)))
image(volcano, cols(pal(20)))
image(volcano, cols=pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
swirl()
library("swirl")
swirl()
qplot(displ, hwy, data=mpg, geom=(c("points", "smooth")), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("points", "smooth"), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), Facets= .~drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets= .~drv)
g <- ggplot(mpg, displ, hwy)
ggplot(mpg, displ, hwy)
ggplot(data=mpg, displ, hwy)
ggplot(mpg, aes(displ, hwy)
)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
(g+geom_point())+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth="lm"
g+geom_point()+geom_smooth()="lm"
g+geom_point()+geom_smooth()<-"lm"
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
print(g)
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv),labs(title="Swirl Rules!"),labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage"))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4,linetype=3,method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_familt="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="1", ylim=c(-3,3))
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line(aes(ylim(-3,3))
)
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(displ, hwy), color=factor(year))
g<-ggplot(mpg, aes(displ, hwy, color=factor(year))
)
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_amooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
swirl
swirl()
str(diamonds)
hist(diamonds)
qplot(diamonds)
qplot(price,data=diamonds)
range(diamond$price)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, bindwidth=18497/30, fill=cut)
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut())
qplot(price, data=diamonds, geom="density", color=cut
)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut, geom_smooth=(method="lm"))
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm") + facets(.~drv)
qplot(carat, price, data=diamonds, color=cut, facets=.~drv) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut + geom_smooth(method="lm")
)
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(data=diamonds$carat, seq(0,1,length=4),na.rm=TRUE )
cutpoints <- quantile(data=diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4),na.rm=TRUE)
cutpoints
cut <- diamonds$car2()
cut <- diamonds$carat, cutpoints
cut
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, printCoefmat()))
g <- ggplot(diamonds, aes(depth, price)
)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut
)
library("swirl")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
distxy
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
abline(h=0.05, col="green")
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
dist(distmt)
distmt
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3)
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
which.min(distTmp, distTmp, which.min)
apply(distTmp, 2, which.min)
points(x,y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean())
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19, cex=2, col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black", "red", "green"), pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source(filename("addPatt.R"), local=TRUE)
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu * diag * t(matv)
matu x diag x t(matv)
=matu * diag * t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- ((svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v))
a1 <- (svd1$u[,1] %*% svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] %*% svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[2] %*% t(svd1$v[,1:2])
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,"562"])
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
sub1
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(x[1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
mplclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col=unclass(sub1$activity))
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(362,363)], center=6)
kClust <- kmeans(sub1[,-c(362:363)], center=6)
kClust <- kmeans(sub1, center=6)
kClust <- kmeans(sub1, centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
table(kClust$cluster, sub1$activity)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab="Walkdown Cluster")
library("swirl")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit((cnames, '|', fixed=TRUE))
cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
x1<0
negative <- x1 <0
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "Month")
hist(dates[negative], "month")
str(site0)
both<-intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, (State.Code==36 & county.site == "both"))
cnt0 <- subset(pm0, (State.Code==36 & county.site %in% both))
cnt0 <- subset(pm0, State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code==36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code=63 & Site.ID=2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID ==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(lwd=2, na.rm=TRUE, h=x0sub)
abline(lwd=2, h=median(x0sub, na.rm=TRUE)
)
plot(dates1, x1sub, pch=20)
abline(lwd=2, h=median(x1sub, na.rm=TRUE))
rng <-range(x0sub, x1sub, na.rm=TUE)
rng <-range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(Sample.Value), na.rm=TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, apply(Sample.Value, mean), na.rm=TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0), mean=mn0)
d1 <- data.frame(state=names(mn1), mean=mn1)
mrg <- merge(d0, d1, "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg, plot(rep(2,52), mrg[,3])
)
with(mrg, points(rep(2,52), mrg[,3]))
segments(x,y)
segments(x,y,x,y)
segments(mrg[1,2],y,x,y)
segments(mrg[,2],mrg[,2],mrg[,3],mrg[,3])
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y,]
getwd()
library("kern")
library("kernlab")
library(kernlab)
install.package("kernlab")
install.packages(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[1:5])
getwd
getwd()
setwd("~/Desktop/Desktop/MyProCert_DataScience/Coursera_rprog/course5/week4/courseproject2")
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library("reshape2")
if(!file.exists("./StormData.csv.bz2")){
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile="./StormData.csv.bz2", method="curl")
}
data <- read.csv(bzfile("./StormData.csv.bz2"), header = TRUE, sep=",")
bunzip2("./StormData.csv.bz2", overwrite=T, remove=F)
library(R.utils)
install.package("R.utils")
install.package(R.utils)
library(R.utils)
library("R.utils")
install.packages("R.utils")
library("R.utils")
bunzip2("data/stormData.csv.bz2", overwrite=T, remove=F)
bunzip2("./stormData.csv.bz2", overwrite=T, remove=F)
head(data)
